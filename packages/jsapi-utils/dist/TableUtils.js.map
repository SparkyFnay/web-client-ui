{"version":3,"sources":["../src/TableUtils.ts"],"names":["Type","FilterType","Operator","FilterOperator","Log","dh","PromiseUtils","TextUtils","TimeoutError","DateUtils","log","module","TableUtils","getSortIndex","sort","columnIndex","i","length","s","column","index","getSortForColumn","tableSort","sortIndex","getFilterText","filter","toString","getFilterTypes","columnType","isBooleanType","isTrue","isFalse","isNull","isCharType","eq","notEq","isNumberType","isDateType","greaterThan","greaterThanOrEqualTo","lessThan","lessThanOrEqualTo","isTextType","eqIgnoreCase","notEqIgnoreCase","contains","notContains","startsWith","endsWith","getNextSort","table","columns","asc","direction","sortDirection","ascending","desc","makeColumnSort","isAbs","none","descending","abs","toggleSortForColumn","sorts","addToExisting","newSort","setSortForColumn","sortColumn","modelColumn","concat","reverse","splice","push","getNormalizedType","dataType","BOOLEAN","CHAR","STRING","DATETIME","DECIMAL","INT","isLongType","isIntegerType","isDecimalType","isStringType","getBaseType","split","isCompatibleType","type1","type2","makeQuickFilter","text","timeZone","orComponents","orFilter","orComponent","andComponents","andFilter","j","andComponent","trim","makeQuickFilterFromComponent","and","Error","or","type","makeQuickNumberFilter","makeQuickBooleanFilter","makeQuickDateFilter","makeQuickCharFilter","makeQuickTextFilter","columnFilter","regex","result","exec","operation","negativeSign","value","abnormalValue","overflow","toLowerCase","FilterCondition","invoke","FilterValue","ofNumber","not","removeCommas","LongWrapper","ofString","error","warn","parseFloat","Number","isNaN","makeRangeFilterWithOperation","cleanText","prefix","suffix","substring","replace","notEqual","cleanValue","boolValue","makeBooleanValue","e","dateText","filterOperation","makeQuickDateFilterWithOperation","startDate","endDate","parseDateRange","startValue","endValue","startFilter","endFilter","makeCancelableTablePromise","makeCancelable","resolved","close","makeCancelableTableEventPromise","eventName","timeout","matcher","eventCleanup","timeoutId","isPending","wrappedPromise","Promise","resolve","reject","setTimeout","addEventListener","event","debug2","clearTimeout","cancel","makeAdvancedFilter","options","filterItems","filterOperators","invertSelection","selectedValues","filterItem","selectedType","newFilter","makeAdvancedValueFilter","filterOperator","err","selectValueFilter","makeSelectValueFilter","makeFilterValue","makeFilterRawValue","rawValue","ofBoolean","makeValue","date","makeNumberValue","allowEmpty","POSITIVE_INFINITY","NEGATIVE_INFINITY","numberText","NUMBER_REGEX","test","filterValue","in","inIgnoreCase","notIn","notInIgnoreCase","DateWrapper","ofJsDate","Date","eqFilter","notEqFilter","values","isNullSelected","String","fromCharCode","isTreeTable","expand","undefined","collapse","sortColumns","isAscending","a","b","aName","name","toUpperCase","bName","Object","freeze","NONE","PRE_SORT","POST_SORT"],"mappings":"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","sourcesContent":["import {\n  Type as FilterType,\n  Operator as FilterOperator,\n  TypeValue as FilterTypeValue,\n  OperatorValue as FilterOperatorValue,\n} from '@deephaven/filters';\nimport Log from '@deephaven/log';\nimport dh, {\n  Column,\n  FilterCondition,\n  FilterValue,\n  LongWrapper,\n  RemoverFn,\n  Sort,\n  Table,\n  TreeTable,\n} from '@deephaven/jsapi-shim';\nimport {\n  CancelablePromise,\n  PromiseUtils,\n  TextUtils,\n  TimeoutError,\n} from '@deephaven/utils';\nimport DateUtils from './DateUtils';\n\nconst log = Log.module('TableUtils');\n\ntype Values<T> = T[keyof T];\nexport type DataType = Values<typeof TableUtils.dataType>;\nexport type SortDirection = Values<typeof TableUtils.sortDirection>;\nexport type ReverseType = Values<typeof TableUtils.REVERSE_TYPE>;\nexport type AdvancedFilterItemType = {\n  selectedType: FilterTypeValue;\n  value: string;\n};\n\n/** Utility class to provide some functions for working with tables */\nexport class TableUtils {\n  static dataType = {\n    BOOLEAN: 'boolean',\n    CHAR: 'char',\n    DATETIME: 'datetime',\n    DECIMAL: 'decimal',\n    INT: 'int',\n    STRING: 'string',\n  } as const;\n\n  static sortDirection = {\n    ascending: 'ASC',\n    descending: 'DESC',\n    reverse: 'REVERSE',\n    none: null,\n  } as const;\n\n  static REVERSE_TYPE = Object.freeze({\n    NONE: 'none',\n    PRE_SORT: 'pre-sort',\n    POST_SORT: 'post-sort',\n  } as const);\n\n  // Regex looking for a negative or positive integer or decimal number\n  static NUMBER_REGEX = /^-?\\d+(\\.\\d+)?$/;\n\n  static getSortIndex(sort: Sort[], columnIndex: number): number | null {\n    for (let i = 0; i < sort.length; i += 1) {\n      const s = sort[i];\n      if (s.column?.index === columnIndex) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * @param tableSort The sorts from the table to get the sort from\n   * @param columnIndex The index of the column to get the sort for\n   * @return The sort for the column, or null if it's not sorted\n   */\n  static getSortForColumn(tableSort: Sort[], columnIndex: number): Sort | null {\n    const sortIndex = TableUtils.getSortIndex(tableSort, columnIndex);\n    if (sortIndex != null) {\n      return tableSort[sortIndex];\n    }\n    return null;\n  }\n\n  static getFilterText(filter: FilterCondition): string | null {\n    if (filter) {\n      return filter.toString();\n    }\n    return null;\n  }\n\n  /** Return the valid filter types for the column */\n  static getFilterTypes(columnType: string): FilterType[] {\n    if (TableUtils.isBooleanType(columnType)) {\n      return [FilterType.isTrue, FilterType.isFalse, FilterType.isNull];\n    }\n    // TODO (DH-11799): In Bard (and beyond), we should use the same types as numbers\n    // It should just work after the merge for DH-11040: https://gitlab.eng.illumon.com/illumon/iris/merge_requests/5801\n    // In Powell though, just support equals/not equals\n    if (TableUtils.isCharType(columnType)) {\n      return [FilterType.eq, FilterType.notEq];\n    }\n    if (\n      TableUtils.isNumberType(columnType) ||\n      TableUtils.isDateType(columnType)\n    ) {\n      return [\n        FilterType.eq,\n        FilterType.notEq,\n        FilterType.greaterThan,\n        FilterType.greaterThanOrEqualTo,\n        FilterType.lessThan,\n        FilterType.lessThanOrEqualTo,\n      ];\n    }\n    if (TableUtils.isTextType(columnType)) {\n      return [\n        FilterType.eq,\n        FilterType.eqIgnoreCase,\n        FilterType.notEq,\n        FilterType.notEqIgnoreCase,\n        FilterType.contains,\n        FilterType.notContains,\n        FilterType.startsWith,\n        FilterType.endsWith,\n      ];\n    }\n    return [];\n  }\n\n  static getNextSort(table: Table, columnIndex: number): Sort | null {\n    if (\n      !table ||\n      !table.columns ||\n      columnIndex < 0 ||\n      columnIndex >= table.columns.length\n    ) {\n      return null;\n    }\n\n    const sort = TableUtils.getSortForColumn(table.sort, columnIndex);\n    if (sort === null) {\n      return table.columns[columnIndex].sort().asc();\n    }\n    if (sort.direction === TableUtils.sortDirection.ascending) {\n      return sort.desc();\n    }\n    return null;\n  }\n\n  static makeColumnSort(\n    table: Table,\n    columnIndex: number,\n    direction: SortDirection,\n    isAbs: boolean\n  ): Sort | null {\n    if (\n      !table ||\n      !table.columns ||\n      columnIndex < 0 ||\n      columnIndex >= table.columns.length\n    ) {\n      return null;\n    }\n\n    if (direction === TableUtils.sortDirection.none) {\n      return null;\n    }\n\n    let sort = table.columns[columnIndex].sort();\n\n    switch (direction) {\n      case TableUtils.sortDirection.ascending:\n        sort = sort.asc();\n        break;\n      case TableUtils.sortDirection.descending:\n        sort = sort.desc();\n        break;\n      default:\n        break;\n    }\n    if (isAbs) {\n      sort = sort.abs();\n    }\n    return sort;\n  }\n\n  /**\n   * Toggles the sort for the specified column\n   * @param sorts The current sorts from IrisGrid.state\n   * @param table The table to apply the sort to\n   * @param columnIndex The column index to apply the sort to\n   * @param addToExisting Add this sort to the existing sort\n   */\n  static toggleSortForColumn(\n    sorts: Sort[],\n    table: Table,\n    columnIndex: number,\n    addToExisting = false\n  ): Sort[] {\n    if (!table || columnIndex < 0 || columnIndex >= table.columns.length) {\n      return [];\n    }\n\n    const newSort = TableUtils.getNextSort(table, columnIndex);\n\n    return TableUtils.setSortForColumn(\n      sorts,\n      columnIndex,\n      newSort,\n      addToExisting\n    );\n  }\n\n  static sortColumn(\n    table: Table,\n    modelColumn: number,\n    direction: SortDirection,\n    isAbs: boolean,\n    addToExisting: boolean\n  ): Sort[] {\n    if (!table || modelColumn < 0 || modelColumn >= table.columns.length) {\n      return [];\n    }\n\n    const newSort = TableUtils.makeColumnSort(\n      table,\n      modelColumn,\n      direction,\n      isAbs\n    );\n\n    return TableUtils.setSortForColumn(\n      table.sort,\n      modelColumn,\n      newSort,\n      addToExisting\n    );\n  }\n\n  /**\n   * Sets the sort for the given column *and* removes any reverses\n   * @param tableSort The current sorts from IrisGrid.state\n   * @param columnIndex The column index to apply the sort to\n   * @param sort The sort object to add\n   * @param addToExisting Add this sort to the existing sort\n   * @returns Returns the modified array of sorts - removing reverses\n   */\n  static setSortForColumn(\n    tableSort: Sort[],\n    columnIndex: number,\n    sort: Sort | null,\n    addToExisting = false\n  ): Sort[] {\n    const sortIndex = TableUtils.getSortIndex(tableSort, columnIndex);\n    let sorts: Sort[] = [];\n    if (addToExisting) {\n      sorts = sorts.concat(\n        tableSort.filter(\n          ({ direction }) => direction !== TableUtils.sortDirection.reverse\n        )\n      );\n      if (sortIndex !== null) {\n        sorts.splice(sortIndex, 1);\n      }\n    }\n\n    if (sort !== null) {\n      sorts.push(sort);\n    }\n\n    return sorts;\n  }\n\n  static getNormalizedType(columnType: string): DataType | null {\n    switch (columnType) {\n      case 'boolean':\n      case 'java.lang.Boolean':\n      case TableUtils.dataType.BOOLEAN:\n        return TableUtils.dataType.BOOLEAN;\n      case 'char':\n      case 'java.lang.Character':\n      case TableUtils.dataType.CHAR:\n        return TableUtils.dataType.CHAR;\n      case 'java.lang.String':\n      case TableUtils.dataType.STRING:\n        return TableUtils.dataType.STRING;\n      case 'io.deephaven.db.tables.utils.DBDateTime':\n      case 'io.deephaven.time.DateTime':\n      case 'com.illumon.iris.db.tables.utils.DBDateTime':\n      case TableUtils.dataType.DATETIME:\n        return TableUtils.dataType.DATETIME;\n      case 'double':\n      case 'java.lang.Double':\n      case 'float':\n      case 'java.lang.Float':\n      case 'java.math.BigDecimal':\n      case TableUtils.dataType.DECIMAL:\n        return TableUtils.dataType.DECIMAL;\n      case 'int':\n      case 'java.lang.Integer':\n      case 'long':\n      case 'java.lang.Long':\n      case 'short':\n      case 'java.lang.Short':\n      case 'byte':\n      case 'java.lang.Byte':\n      case 'java.math.BigInteger':\n      case TableUtils.dataType.INT:\n        return TableUtils.dataType.INT;\n      default:\n        return null;\n    }\n  }\n\n  static isLongType(columnType: string): boolean {\n    switch (columnType) {\n      case 'long':\n      case 'java.lang.Long':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  static isDateType(columnType: string): boolean {\n    switch (columnType) {\n      case 'io.deephaven.db.tables.utils.DBDateTime':\n      case 'io.deephaven.time.DateTime':\n      case 'com.illumon.iris.db.tables.utils.DBDateTime':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  static isNumberType(columnType: string): boolean {\n    return (\n      TableUtils.isIntegerType(columnType) ||\n      TableUtils.isDecimalType(columnType)\n    );\n  }\n\n  static isIntegerType(columnType: string): boolean {\n    switch (columnType) {\n      case 'int':\n      case 'java.lang.Integer':\n      case 'java.math.BigInteger':\n      case 'long':\n      case 'java.lang.Long':\n      case 'short':\n      case 'java.lang.Short':\n      case 'byte':\n      case 'java.lang.Byte':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  static isDecimalType(columnType: string): boolean {\n    switch (columnType) {\n      case 'double':\n      case 'java.lang.Double':\n      case 'java.math.BigDecimal':\n      case 'float':\n      case 'java.lang.Float':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  static isBooleanType(columnType: string): boolean {\n    switch (columnType) {\n      case 'boolean':\n      case 'java.lang.Boolean':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  static isCharType(columnType: string): boolean {\n    switch (columnType) {\n      case 'char':\n      case 'java.lang.Character':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  static isStringType(columnType: string): boolean {\n    switch (columnType) {\n      case 'java.lang.String':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  static isTextType(columnType: string): boolean {\n    return this.isStringType(columnType) || this.isCharType(columnType);\n  }\n\n  /**\n   * Get base column type\n   * @param columnType Column type\n   * @returns Element type for array columns, original type for non-array columns\n   */\n  static getBaseType(columnType: string): string {\n    return columnType.split('[]')[0];\n  }\n\n  /**\n   * Check if the column types are compatible\n   * @param type1 Column type to check\n   * @param type2 Column type to check\n   * @returns True, if types are compatible\n   */\n  static isCompatibleType(type1: string, type2: string): boolean {\n    return (\n      TableUtils.getNormalizedType(type1) ===\n      TableUtils.getNormalizedType(type2)\n    );\n  }\n\n  /**\n   * Create filter with the provided column and text. Handles multiple filters joined with && or ||\n   * @param column The column to set the filter on\n   * @param text The text string to create the filter from\n   * @param timeZone The time zone to make this value in if it is a date type. E.g. America/New_York\n   * @returns Returns the created filter, null if text could not be parsed\n   */\n  static makeQuickFilter(\n    column: Column,\n    text: string,\n    timeZone: string\n  ): FilterCondition | null {\n    const orComponents = text.split('||');\n    let orFilter = null;\n    for (let i = 0; i < orComponents.length; i += 1) {\n      const orComponent = orComponents[i];\n      const andComponents = orComponent.split('&&');\n      let andFilter = null;\n      for (let j = 0; j < andComponents.length; j += 1) {\n        const andComponent = andComponents[j].trim();\n        if (andComponent.length > 0) {\n          const filter = TableUtils.makeQuickFilterFromComponent(\n            column,\n            andComponent,\n            timeZone\n          );\n          if (filter) {\n            if (andFilter) {\n              andFilter = andFilter.and(filter);\n            } else {\n              andFilter = filter;\n            }\n          } else {\n            throw new Error(`Unable to parse quick filter from text ${text}`);\n          }\n        }\n      }\n\n      if (orFilter && andFilter) {\n        orFilter = orFilter.or(andFilter);\n      } else {\n        orFilter = andFilter;\n      }\n    }\n\n    return orFilter;\n  }\n\n  /**\n   * Create filter with the provided column and text of one component (no multiple conditions)\n   * @param column The column to set the filter on\n   * @param text The text string to create the filter from\n   * @param timeZone The time zone to make this filter in if it is a date type. E.g. America/New_York\n   * @returns Returns the created filter, null if text could not be parsed\n   */\n  static makeQuickFilterFromComponent(\n    column: Column,\n    text: string,\n    timeZone: string\n  ): FilterCondition | null {\n    const { type } = column;\n    if (TableUtils.isNumberType(type)) {\n      return this.makeQuickNumberFilter(column, text);\n    }\n    if (TableUtils.isBooleanType(type)) {\n      return this.makeQuickBooleanFilter(column, text);\n    }\n    if (TableUtils.isDateType(type)) {\n      return this.makeQuickDateFilter(column, text, timeZone);\n    }\n    if (TableUtils.isCharType(type)) {\n      return this.makeQuickCharFilter(column, text);\n    }\n    return this.makeQuickTextFilter(column, text);\n  }\n\n  static makeQuickNumberFilter(\n    column: Column,\n    text: string\n  ): FilterCondition | null {\n    if (text == null) {\n      return null;\n    }\n\n    const columnFilter = column.filter();\n    let filter = null;\n\n    const regex = /\\s*(>=|<=|=>|=<|>|<|!=|=|!)?(\\s*-\\s*)?(\\s*\\d*(?:,\\d{3})*(?:\\.\\d*)?\\s*)?(null|nan|infinity|inf|\\u221E)?(.*)/i;\n    const result = regex.exec(text);\n\n    let operation = null;\n    let negativeSign = null;\n    let value = null;\n    let abnormalValue = null; // includes nan, null and infinity(positive & negative)\n    let overflow = null;\n\n    if (result !== null && result.length > 3) {\n      [, operation, negativeSign, value, abnormalValue, overflow] = result;\n    }\n\n    if (overflow != null && overflow.trim().length > 0) {\n      // Some bad characters after the number, bail out!\n      return null;\n    }\n\n    if (operation == null) {\n      operation = '=';\n    }\n\n    if (abnormalValue != null) {\n      if (!(operation === '=' || operation === '!' || operation === '!=')) {\n        // only equal and not equal operations are supported for abnormal value filter\n        return null;\n      }\n      abnormalValue = abnormalValue.trim().toLowerCase();\n      switch (abnormalValue) {\n        case 'null':\n          filter = columnFilter.isNull();\n          break;\n        case 'nan':\n          filter = dh.FilterCondition.invoke('isNaN', columnFilter);\n          break;\n        case 'infinity':\n        case 'inf':\n        case '\\u221E':\n          if (negativeSign != null) {\n            filter = dh.FilterCondition.invoke('isInf', columnFilter).and(\n              columnFilter.lessThan(dh.FilterValue.ofNumber(0))\n            );\n          } else {\n            filter = dh.FilterCondition.invoke('isInf', columnFilter).and(\n              columnFilter.greaterThan(dh.FilterValue.ofNumber(0))\n            );\n          }\n          break;\n        default:\n          break;\n      }\n      if (filter !== null && (operation === '!' || operation === '!=')) {\n        filter = filter.not();\n      }\n      return filter;\n    }\n\n    if (value == null) {\n      return null;\n    }\n\n    value = TableUtils.removeCommas(value);\n    if (TableUtils.isLongType(column.type)) {\n      try {\n        value = dh.FilterValue.ofNumber(\n          dh.LongWrapper.ofString(`${negativeSign != null ? '-' : ''}${value}`)\n        );\n      } catch (error) {\n        log.warn('Unable to create long filter', error);\n        return null;\n      }\n    } else {\n      value = parseFloat(value);\n      if (value == null || Number.isNaN(value)) {\n        return null;\n      }\n\n      value = dh.FilterValue.ofNumber(negativeSign != null ? 0 - value : value);\n    }\n\n    filter = column.filter();\n\n    return TableUtils.makeRangeFilterWithOperation(filter, operation, value);\n  }\n\n  static makeQuickTextFilter(\n    column: Column,\n    text: string | null\n  ): FilterCondition | null {\n    if (text == null) {\n      return null;\n    }\n\n    const cleanText = `${text}`.trim();\n    const regex = /^(!~|!=|~|=|!)?(.*)/;\n    const result = regex.exec(cleanText);\n\n    let operation = null;\n    let value = null;\n    if (result !== null && result.length > 2) {\n      [, operation, value] = result;\n      if (value != null) {\n        value = value.trim();\n      }\n    }\n\n    if (value == null || value.length === 0) {\n      return null;\n    }\n\n    if (operation == null) {\n      operation = '=';\n    }\n\n    const filter = column.filter();\n    if (value.toLowerCase() === 'null') {\n      // Null is a special case!\n      switch (operation) {\n        case '=':\n          return filter.isNull();\n        case '!=':\n        case '!':\n          return filter.isNull().not();\n        default:\n          return null;\n      }\n    }\n\n    let prefix = null;\n    let suffix = null;\n    if (value.startsWith('*')) {\n      prefix = '*';\n      value = value.substring(1);\n    } else if (value.endsWith('*') && !value.endsWith('\\\\*')) {\n      suffix = '*';\n      value = value.substring(0, value.length - 1);\n    }\n\n    value = value.replace('\\\\', '');\n\n    switch (operation) {\n      case '~': {\n        return filter\n          .isNull()\n          .not()\n          .and(\n            filter.invoke(\n              'matches',\n              dh.FilterValue.ofString(`(?s)(?i).*\\\\Q${value}\\\\E.*`)\n            )\n          );\n      }\n      case '!~':\n        return filter\n          .isNull()\n          .or(\n            filter\n              .invoke(\n                'matches',\n                dh.FilterValue.ofString(`(?s)(?i).*\\\\Q${value}\\\\E.*`)\n              )\n              .not()\n          );\n      case '!=':\n        if (prefix === '*') {\n          // Does not end with\n          return filter\n            .isNull()\n            .or(\n              filter\n                .invoke(\n                  'matches',\n                  dh.FilterValue.ofString(`(?s)(?i).*\\\\Q${value}\\\\E$`)\n                )\n                .not()\n            );\n        }\n        if (suffix === '*') {\n          // Does not start with\n          return filter\n            .isNull()\n            .or(\n              filter\n                .invoke(\n                  'matches',\n                  dh.FilterValue.ofString(`(?s)(?i)^\\\\Q${value}\\\\E.*`)\n                )\n                .not()\n            );\n        }\n        return filter.notEqIgnoreCase(\n          dh.FilterValue.ofString(value.toLowerCase())\n        );\n\n      case '=':\n        if (prefix === '*') {\n          // Ends with\n          return filter\n            .isNull()\n            .not()\n            .and(\n              filter.invoke(\n                'matches',\n                dh.FilterValue.ofString(`(?s)(?i).*\\\\Q${value}\\\\E$`)\n              )\n            );\n        }\n        if (suffix === '*') {\n          // Starts with\n          return filter\n            .isNull()\n            .not()\n            .and(\n              filter.invoke(\n                'matches',\n                dh.FilterValue.ofString(`(?s)(?i)^\\\\Q${value}\\\\E.*`)\n              )\n            );\n        }\n        return filter.eqIgnoreCase(\n          dh.FilterValue.ofString(value.toLowerCase())\n        );\n\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  static makeQuickBooleanFilter(\n    column: Column,\n    text: string\n  ): FilterCondition | null {\n    if (text == null) {\n      return null;\n    }\n\n    const regex = /^(!=|=|!)?(.*)/;\n    const result = regex.exec(`${text}`.trim());\n    if (result === null) {\n      return null;\n    }\n    const [, operation, value] = result;\n    const notEqual = operation === '!' || operation === '!=';\n    const cleanValue = value.trim().toLowerCase();\n\n    let filter: FilterCondition | FilterValue = column.filter();\n\n    try {\n      const boolValue = TableUtils.makeBooleanValue(cleanValue);\n      if (boolValue) {\n        filter = filter.isTrue();\n      } else if (boolValue === null) {\n        filter = filter.isNull();\n      } else {\n        filter = filter.isFalse();\n      }\n\n      return notEqual ? filter.not() : filter;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Builds a date filter parsed from the text string which may or may not include an operator.\n   * @param column The column to build the filter from, with or without a leading operator.\n   * @param text The date string text to parse.\n   * @param timeZone The time zone to make this filter in if it is a date type. E.g. America/New_York\n   */\n  static makeQuickDateFilter(\n    column: Column,\n    text: string,\n    timeZone: string\n  ): FilterCondition {\n    const cleanText = text.trim();\n    const regex = /\\s*(>=|<=|=>|=<|>|<|!=|!|=)?(.*)/;\n    const result = regex.exec(cleanText);\n    if (result == null || result.length <= 2) {\n      throw new Error(`Unable to parse date filter: ${text}`);\n    }\n\n    let operation = null;\n    let dateText = null;\n\n    [, operation, dateText] = result;\n\n    let filterOperation: FilterTypeValue = FilterType.eq;\n    switch (operation) {\n      case '<':\n        filterOperation = FilterType.lessThan;\n        break;\n      case '<=':\n      case '=<':\n        filterOperation = FilterType.lessThanOrEqualTo;\n        break;\n      case '>':\n        filterOperation = FilterType.greaterThan;\n        break;\n      case '>=':\n      case '=>':\n        filterOperation = FilterType.greaterThanOrEqualTo;\n        break;\n      case '!=':\n      case '!':\n        filterOperation = FilterType.notEq;\n        break;\n      case '=':\n      case '==':\n      default:\n        filterOperation = FilterType.eq;\n        break;\n    }\n\n    return TableUtils.makeQuickDateFilterWithOperation(\n      column,\n      dateText,\n      filterOperation,\n      timeZone\n    );\n  }\n\n  /**\n   * Builds a date filter parsed from the text string with the provided filter.\n   * @param column The column to build the filter from.\n   * @param text The date string text to parse, without an operator.\n   * @param operation The filter operation to use.\n   * @param timeZone The time zone to make this filter with. E.g. America/New_York\n   */\n  static makeQuickDateFilterWithOperation(\n    column: Column,\n    text: string,\n    operation: FilterTypeValue = FilterType.eq,\n    timeZone: string\n  ): FilterCondition {\n    if (column == null) {\n      throw new Error('Column is null');\n    }\n\n    const [startDate, endDate] = DateUtils.parseDateRange(text, timeZone);\n\n    const startValue =\n      startDate != null ? dh.FilterValue.ofNumber(startDate) : null;\n    const endValue = endDate != null ? dh.FilterValue.ofNumber(endDate) : null;\n\n    const filter = column.filter();\n    if (startValue == null) {\n      return operation === FilterType.notEq\n        ? filter.isNull().not()\n        : filter.isNull();\n    }\n\n    switch (operation) {\n      case FilterType.eq: {\n        if (endValue != null) {\n          const startFilter = filter.greaterThanOrEqualTo(startValue);\n          const endFilter = filter.lessThan(endValue);\n          return startFilter.and(endFilter);\n        }\n        return filter.eq(startValue);\n      }\n      case FilterType.lessThan: {\n        return filter.lessThan(startValue);\n      }\n      case FilterType.lessThanOrEqualTo: {\n        if (endValue != null) {\n          return filter.lessThan(endValue);\n        }\n        return filter.lessThanOrEqualTo(startValue);\n      }\n      case FilterType.greaterThan: {\n        if (endValue != null) {\n          return filter.greaterThanOrEqualTo(endValue);\n        }\n        return filter.greaterThan(startValue);\n      }\n      case FilterType.greaterThanOrEqualTo:\n        return filter.greaterThanOrEqualTo(startValue);\n      case FilterType.notEq: {\n        if (endValue != null) {\n          const startFilter = filter.lessThan(startValue);\n          const endFilter = filter.greaterThanOrEqualTo(endValue);\n          return startFilter.or(endFilter);\n        }\n        return filter.notEq(startValue);\n      }\n\n      default:\n        throw new Error(`Invalid operator: ${operation}`);\n    }\n  }\n\n  static makeQuickCharFilter(\n    column: Column,\n    text: string\n  ): FilterCondition | null {\n    if (text == null) {\n      return null;\n    }\n\n    const cleanText = `${text}`.trim();\n    const regex = /^(!=|=|!)?(null|.)?(.*)/;\n    const result = regex.exec(cleanText);\n\n    let operation = null;\n    let value = null;\n    let overflow = null;\n    if (result !== null && result.length > 3) {\n      [, operation, value, overflow] = result;\n    }\n    if (overflow != null && overflow.trim().length > 0) {\n      // Some bad characters after the number, bail out!\n      return null;\n    }\n\n    if (value == null || value.length === 0) {\n      return null;\n    }\n\n    if (operation == null) {\n      operation = '=';\n    }\n\n    const filter = column.filter();\n    if (value.toLowerCase() === 'null') {\n      // Null is a special case!\n      switch (operation) {\n        case '=':\n          return filter.isNull();\n        case '!=':\n        case '!':\n          return filter.isNull().not();\n        default:\n          return null;\n      }\n    }\n\n    return TableUtils.makeRangeFilterWithOperation(\n      filter,\n      operation,\n      dh.FilterValue.ofString(value)\n    );\n  }\n\n  /**\n   * @param filter The column filter to apply the range operation to\n   * @param operation The range operation to run\n   * @param value The value to use for the operation\n   * @returns The condition with the specified operation\n   */\n  static makeRangeFilterWithOperation(\n    filter: FilterValue,\n    operation: string,\n    value: FilterValue\n  ): FilterCondition | null {\n    switch (operation) {\n      case '=':\n        return filter.eq(value);\n      case '<':\n        return filter.lessThan(value);\n      case '<=':\n      case '=<':\n        return filter.lessThanOrEqualTo(value);\n      case '>':\n        return filter.greaterThan(value);\n      case '>=':\n      case '=>':\n        return filter.greaterThanOrEqualTo(value);\n      case '!=':\n      case '!':\n        return filter.notEq(value);\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Wraps a table promise in a cancelable promise that will close the table if the promise is cancelled.\n   * Use in a component that loads a table, and call cancel when unmounting.\n   * @param table The table promise to wrap\n   */\n  static makeCancelableTablePromise(\n    table: Promise<Table> | Table\n  ): CancelablePromise<Table> {\n    return PromiseUtils.makeCancelable(table, resolved => {\n      resolved.close();\n    });\n  }\n\n  /**\n   * Make a cancelable promise for a one-shot table event with a timeout.\n   * @param table Table to listen for events on\n   * @param eventName Event to listen for\n   * @param timeout Event timeout in milliseconds, defaults to 0\n   * @param matcher Optional function to determine if the promise can be resolved or stays pending\n   * @returns Resolves with the event data\n   */\n  static makeCancelableTableEventPromise(\n    table: Table | TreeTable,\n    eventName: string,\n    timeout = 0,\n    matcher: ((event: CustomEvent) => boolean) | null = null\n  ): CancelablePromise<CustomEvent> {\n    let eventCleanup: RemoverFn;\n    let timeoutId: ReturnType<typeof setTimeout>;\n    let isPending = true;\n    const wrappedPromise = new Promise((resolve, reject) => {\n      timeoutId = setTimeout(() => {\n        eventCleanup();\n        isPending = false;\n        reject(new TimeoutError(`Event \"${eventName}\" timed out.`));\n      }, timeout);\n      eventCleanup = table.addEventListener(eventName, event => {\n        if (matcher != null && !matcher(event)) {\n          log.debug2('Event triggered, but matcher returned false.');\n          return;\n        }\n        log.debug2('Event triggered, resolving.');\n        eventCleanup();\n        clearTimeout(timeoutId);\n        isPending = false;\n        resolve(event);\n      });\n    }) as CancelablePromise<CustomEvent>;\n    wrappedPromise.cancel = () => {\n      if (isPending) {\n        log.debug2('Pending promise cleanup.');\n        eventCleanup();\n        clearTimeout(timeoutId);\n        isPending = false;\n        return;\n      }\n      log.debug2('Ignoring non-pending promise cancel.');\n    };\n    return wrappedPromise;\n  }\n\n  static makeAdvancedFilter(\n    column: Column,\n    options: {\n      filterItems: AdvancedFilterItemType[];\n      filterOperators: FilterOperatorValue[];\n      invertSelection: boolean;\n      selectedValues: string[];\n    },\n    timeZone: string\n  ): FilterCondition | null {\n    const {\n      filterItems,\n      filterOperators,\n      invertSelection,\n      selectedValues,\n    } = options;\n    let filter = null;\n    for (let i = 0; i < filterItems.length; i += 1) {\n      const filterItem = filterItems[i];\n      const { selectedType, value } = filterItem;\n      if (\n        selectedType != null &&\n        selectedType.length > 0 &&\n        value != null &&\n        value.length > 0\n      ) {\n        try {\n          const newFilter = TableUtils.makeAdvancedValueFilter(\n            column,\n            selectedType,\n            value,\n            timeZone\n          );\n          if (newFilter != null) {\n            if (i === 0) {\n              filter = newFilter;\n            } else if (filter !== null && i - 1 < filterOperators.length) {\n              const filterOperator = filterOperators[i - 1];\n              if (filterOperator === FilterOperator.and) {\n                filter = filter.and(newFilter);\n              } else if (filterOperator === FilterOperator.or) {\n                filter = filter.or(newFilter);\n              } else {\n                log.error(\n                  'Unexpected filter operator',\n                  filterOperator,\n                  newFilter\n                );\n                filter = null;\n                break;\n              }\n            }\n          } else {\n            log.debug2('Empty filter ignored for', selectedType, value);\n          }\n        } catch (err) {\n          log.error('Unable to create filter', err);\n          filter = null;\n          break;\n        }\n      }\n    }\n\n    const selectValueFilter = TableUtils.makeSelectValueFilter(\n      column,\n      selectedValues,\n      invertSelection\n    );\n    if (selectValueFilter != null) {\n      if (filter != null) {\n        filter = filter.and(selectValueFilter);\n      } else {\n        filter = selectValueFilter;\n      }\n    }\n    return filter;\n  }\n\n  static removeCommas(value: string): string {\n    return value.replace(/[\\s|,]/g, '');\n  }\n\n  /**\n   * @param columnType The column type to make the filter value from.\n   * @param value The value to make the filter value from.\n   * @returns The FilterValue item for this column/value combination\n   */\n  static makeFilterValue(columnType: string, value: string): FilterValue {\n    const type = TableUtils.getBaseType(columnType);\n    if (TableUtils.isTextType(type)) {\n      return dh.FilterValue.ofString(value);\n    }\n    if (TableUtils.isLongType(type)) {\n      return dh.FilterValue.ofNumber(\n        dh.LongWrapper.ofString(TableUtils.removeCommas(value))\n      );\n    }\n\n    return dh.FilterValue.ofNumber(TableUtils.removeCommas(value));\n  }\n\n  /**\n   * Takes a value and converts it to an `dh.FilterValue`\n   *\n   * @param columnType The column type to make the filter value from.\n   * @param value The value to actually set\n   * @returns The FilterValue item for this column/value combination\n   */\n  static makeFilterRawValue(\n    columnType: string,\n    rawValue: unknown\n  ): FilterValue {\n    if (TableUtils.isTextType(columnType)) {\n      return dh.FilterValue.ofString(rawValue);\n    }\n\n    if (TableUtils.isBooleanType(columnType)) {\n      return dh.FilterValue.ofBoolean(rawValue);\n    }\n\n    return dh.FilterValue.ofNumber(rawValue);\n  }\n\n  /**\n   * Converts a string value to a value appropriate for the column\n   * @param columnType The column type to make the value for\n   * @param text The string value to make a type for\n   * @param timeZone The time zone to make this value in if it is a date type. E.g. America/New_York\n   */\n  static makeValue(\n    columnType: string,\n    text: string,\n    timeZone: string\n  ): string | number | boolean | LongWrapper | null {\n    if (text == null || text === 'null') {\n      return null;\n    }\n    if (TableUtils.isTextType(columnType)) {\n      return text;\n    }\n    if (TableUtils.isLongType(columnType)) {\n      return dh.LongWrapper.ofString(TableUtils.removeCommas(text));\n    }\n    if (TableUtils.isBooleanType(columnType)) {\n      return TableUtils.makeBooleanValue(text, true);\n    }\n    if (TableUtils.isDateType(columnType)) {\n      const [date] = DateUtils.parseDateRange(text, timeZone);\n      return date;\n    }\n\n    if (TableUtils.isNumberType(columnType)) {\n      return TableUtils.makeNumberValue(text);\n    }\n\n    log.error('Unexpected column type', columnType);\n    return null;\n  }\n\n  static makeBooleanValue(text: string, allowEmpty = false): boolean | null {\n    if (text === '' && allowEmpty) {\n      return null;\n    }\n\n    switch (text?.toLowerCase()) {\n      case 'null':\n        return null;\n      case '0':\n      case 'f':\n      case 'fa':\n      case 'fal':\n      case 'fals':\n      case 'false':\n      case 'n':\n      case 'no':\n        return false;\n      case '1':\n      case 't':\n      case 'tr':\n      case 'tru':\n      case 'true':\n      case 'y':\n      case 'ye':\n      case 'yes':\n        return true;\n      default:\n        throw new Error(`Invalid boolean '${text}'`);\n    }\n  }\n\n  static makeNumberValue(text: string): number | null {\n    if (text == null || text === 'null' || text === '') {\n      return null;\n    }\n\n    const cleanText = text.toLowerCase().trim();\n    if (cleanText === '∞' || cleanText === 'infinity' || cleanText === 'inf') {\n      return Number.POSITIVE_INFINITY;\n    }\n    if (\n      cleanText === '-∞' ||\n      cleanText === '-infinity' ||\n      cleanText === '-inf'\n    ) {\n      return Number.NEGATIVE_INFINITY;\n    }\n\n    const numberText = TableUtils.removeCommas(cleanText);\n    if (TableUtils.NUMBER_REGEX.test(numberText)) {\n      return parseFloat(numberText);\n    }\n\n    throw new Error(`Invalid number '${text}'`);\n  }\n\n  static makeAdvancedValueFilter(\n    column: Column,\n    operation: FilterTypeValue,\n    value: string,\n    timeZone: string\n  ): FilterCondition {\n    if (TableUtils.isDateType(column.type)) {\n      return TableUtils.makeQuickDateFilterWithOperation(\n        column,\n        value,\n        operation,\n        timeZone\n      );\n    }\n\n    const filterValue = TableUtils.makeFilterValue(column.type, value);\n    const filter = column.filter();\n    switch (operation) {\n      case FilterType.eq:\n        return filter.eq(filterValue);\n      case FilterType.eqIgnoreCase:\n        return filter.eqIgnoreCase(filterValue);\n      case FilterType.notEq:\n        return filter.notEq(filterValue);\n      case FilterType.notEqIgnoreCase:\n        return filter.notEqIgnoreCase(filterValue);\n      case FilterType.greaterThan:\n        return filter.greaterThan(filterValue);\n      case FilterType.greaterThanOrEqualTo:\n        return filter.greaterThanOrEqualTo(filterValue);\n      case FilterType.lessThan:\n        return filter.lessThan(filterValue);\n      case FilterType.lessThanOrEqualTo:\n        return filter.lessThanOrEqualTo(filterValue);\n      case FilterType.isTrue:\n        return filter.isTrue();\n      case FilterType.isFalse:\n        return filter.isFalse();\n      case FilterType.isNull:\n        return filter.isNull();\n      case FilterType.contains:\n        return filter\n          .isNull()\n          .not()\n          .and(\n            filter.invoke(\n              'matches',\n              dh.FilterValue.ofString(`(?s)(?i).*\\\\Q${value}\\\\E.*`)\n            )\n          );\n      case FilterType.notContains:\n        return filter\n          .isNull()\n          .or(\n            filter\n              .invoke(\n                'matches',\n                dh.FilterValue.ofString(`(?s)(?i).*\\\\Q${value}\\\\E.*`)\n              )\n              .not()\n          );\n      case FilterType.startsWith:\n        return filter\n          .isNull()\n          .not()\n          .and(\n            filter.invoke(\n              'matches',\n              dh.FilterValue.ofString(`(?s)(?i)^\\\\Q${value}\\\\E.*`)\n            )\n          );\n      case FilterType.endsWith:\n        return filter\n          .isNull()\n          .not()\n          .and(\n            filter.invoke(\n              'matches',\n              dh.FilterValue.ofString(`(?s)(?i).*\\\\Q${value}\\\\E$`)\n            )\n          );\n      case FilterType.in:\n      case FilterType.inIgnoreCase:\n      case FilterType.notIn:\n      case FilterType.notInIgnoreCase:\n      case FilterType.invoke:\n      default:\n        throw new Error(`Unexpected filter operation: ${operation}`);\n    }\n  }\n\n  /**\n   * Create a filter using the selected items\n   * Has a flag for invertSelection as we start from a \"Select All\" state and a user just deselects items.\n   * Since there may be millions of distinct items, it's easier to build an inverse filter.\n   * @param column The column to set the filter on\n   * @param selectedValues The values that are selected\n   * @param invertSelection Invert the selection (eg. All items are selected, then you deselect items)\n   * @returns Returns a `in` or `notIn` FilterCondition as necessary, or null if no filtering should be applied (everything selected)\n   */\n  static makeSelectValueFilter(\n    column: Column,\n    selectedValues: string[],\n    invertSelection: boolean\n  ): FilterCondition | null {\n    if (selectedValues.length === 0) {\n      if (invertSelection) {\n        // No filter means select everything\n        return null;\n      }\n\n      // KLUDGE: Return a conflicting filter to show no results.\n      // Could recognize this situation at a higher or lower level and pause updates on the\n      // table, but this situation should be rare and that wouldn't be much gains for some added complexity\n      let value = null;\n\n      if (TableUtils.isTextType(column.type)) {\n        // Use 'a' so that it can work for String or Character types\n        value = dh.FilterValue.ofString('a');\n      } else if (TableUtils.isBooleanType(column.type)) {\n        value = dh.FilterValue.ofBoolean(true);\n      } else if (TableUtils.isDateType(column.type)) {\n        value = dh.FilterValue.ofNumber(dh.DateWrapper.ofJsDate(new Date()));\n      } else {\n        value = dh.FilterValue.ofNumber(0);\n      }\n\n      const eqFilter = column.filter().eq(value);\n      const notEqFilter = column.filter().notEq(value);\n      return eqFilter.and(notEqFilter);\n    }\n\n    const values = [];\n    let isNullSelected = false;\n    for (let i = 0; i < selectedValues.length; i += 1) {\n      const value = selectedValues[i];\n      if (value == null) {\n        isNullSelected = true;\n      } else if (TableUtils.isTextType(column.type)) {\n        values.push(\n          dh.FilterValue.ofString(\n            typeof value === 'number' ? String.fromCharCode(value) : value\n          )\n        );\n      } else if (TableUtils.isBooleanType(column.type)) {\n        values.push(dh.FilterValue.ofBoolean(!!value));\n      } else {\n        values.push(dh.FilterValue.ofNumber(value));\n      }\n    }\n\n    if (isNullSelected) {\n      if (values.length > 0) {\n        if (invertSelection) {\n          return column\n            .filter()\n            .isNull()\n            .not()\n            .and(column.filter().notIn(values));\n        }\n        return column.filter().isNull().or(column.filter().in(values));\n      }\n      if (invertSelection) {\n        return column.filter().isNull().not();\n      }\n\n      return column.filter().isNull();\n    }\n\n    if (invertSelection) {\n      return column.filter().notIn(values);\n    }\n\n    return column.filter().in(values);\n  }\n\n  static isTreeTable(table: unknown): table is TreeTable {\n    return (\n      table != null &&\n      (table as TreeTable).expand !== undefined &&\n      (table as TreeTable).collapse !== undefined\n    );\n  }\n\n  /**\n   * Copies the provided array, sorts by column name case insensitive, and returns the sorted array.\n   * @param columns The columns to sort\n   * @param isAscending Whether to sort ascending\n   */\n  static sortColumns(columns: Column[], isAscending = true): Column[] {\n    return [...columns].sort((a, b) => {\n      const aName = a.name.toUpperCase();\n      const bName = b.name.toUpperCase();\n      return TextUtils.sort(aName, bName, isAscending);\n    });\n  }\n}\n\nexport default TableUtils;\n"],"file":"TableUtils.js"}