{"version":3,"sources":["../../src/formatters/IntegerColumnFormatter.ts"],"names":["dh","Log","TableColumnFormatter","log","module","IntegerColumnFormatter","isValid","format","i18n","NumberFormat","formatString","e","makeFormat","label","type","TYPE_CONTEXT_PRESET","multiplier","makePresetFormat","makeCustomFormat","TYPE_CONTEXT_CUSTOM","isSameFormat","formatA","formatB","constructor","defaultFormatString","DEFAULT_FORMAT_STRING","valueParam","value","error"],"mappings":"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","sourcesContent":["/* eslint class-methods-use-this: \"off\" */\nimport dh from '@deephaven/jsapi-shim';\nimport Log from '@deephaven/log';\nimport TableColumnFormatter, {\n  TableColumnFormat,\n} from './TableColumnFormatter';\n\nconst log = Log.module('IntegerColumnFormatter');\n\nexport type IntegerColumnFormat = TableColumnFormat & {\n  multiplier?: number;\n};\n\nexport type IntegerColumnFormatterOptions = {\n  // Default format string to use. Defaults to IntegerColumnFormatter.DEFAULT_FORMAT_STRING\n  defaultFormatString?: string;\n};\n\n/** Column formatter for integers/whole numbers */\nexport class IntegerColumnFormatter extends TableColumnFormatter<number> {\n  /**\n   * Validates format object\n   * @param format Format object\n   * @returns true for valid object\n   */\n  static isValid(format: IntegerColumnFormat): boolean {\n    try {\n      dh.i18n.NumberFormat.format(format.formatString, 0);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Create an IntegerColumnFormat object with the parameters specified\n   * @param label Label for the format\n   * @param formatString Format string for the format\n   * @param multiplier Optional multiplier for the formatter\n   * @param type Type of format created\n   * @returns IntegerColumnFormat object\n   */\n  static makeFormat(\n    label: string,\n    formatString: string,\n    type = TableColumnFormatter.TYPE_CONTEXT_PRESET,\n    multiplier?: number\n  ): IntegerColumnFormat {\n    return {\n      label,\n      type,\n      formatString,\n      multiplier,\n    };\n  }\n\n  /**\n   * Convenient function to create a IntegerFormatObject with Preset type set\n   * @param label Label for this format object\n   * @param formatString Format string to use\n   * @param multiplier Multiplier to use\n   * @returns IntegerColumnFormat object\n   */\n  static makePresetFormat(\n    label: string,\n    formatString = '',\n    multiplier?: number\n  ): IntegerColumnFormat {\n    return IntegerColumnFormatter.makeFormat(\n      label,\n      formatString,\n      TableColumnFormatter.TYPE_CONTEXT_PRESET,\n      multiplier\n    );\n  }\n\n  /**\n   * Convenient function to create a IntegerFormatObject with a default 'Custom Format' label and Custom type\n   * @param formatString Format string to use\n   * @param multiplier Multiplier to use\n   * @returns IntegerColumnFormat object\n   */\n  static makeCustomFormat(\n    formatString = '',\n    multiplier?: number\n  ): IntegerColumnFormat {\n    return IntegerColumnFormatter.makeFormat(\n      'Custom Format',\n      formatString,\n      TableColumnFormatter.TYPE_CONTEXT_CUSTOM,\n      multiplier\n    );\n  }\n\n  /**\n   * Check if the given formats match\n   * @param formatA format object to check\n   * @param formatB format object to check\n   * @returns True if the formats match\n   */\n  static isSameFormat(\n    formatA?: IntegerColumnFormat,\n    formatB?: IntegerColumnFormat\n  ): boolean {\n    return (\n      formatA === formatB ||\n      (formatA != null &&\n        formatB != null &&\n        formatA.type === formatB.type &&\n        formatA.formatString === formatB.formatString &&\n        formatA.multiplier === formatB.multiplier)\n    );\n  }\n\n  static DEFAULT_FORMAT_STRING = '###,##0';\n\n  static FORMAT_MILLIONS = IntegerColumnFormatter.makePresetFormat(\n    'Millions',\n    '###,##0.000 mm',\n    0.000001\n  );\n\n  defaultFormatString: string;\n\n  constructor({\n    defaultFormatString = IntegerColumnFormatter.DEFAULT_FORMAT_STRING,\n  }: IntegerColumnFormatterOptions = {}) {\n    super();\n\n    this.defaultFormatString = defaultFormatString;\n  }\n\n  /**\n   * Format a value with the provided format object\n   * @param valueParam Value to format\n   * @param format Format object\n   * @returns Formatted string\n   */\n  format(valueParam: number, format?: IntegerColumnFormat): string {\n    const formatString =\n      (format && format.formatString) || this.defaultFormatString;\n    const value =\n      format && format.multiplier ? valueParam * format.multiplier : valueParam;\n    try {\n      return dh.i18n.NumberFormat.format(formatString, value);\n    } catch (e) {\n      log.error('Invalid format arguments');\n    }\n    return '';\n  }\n}\n\nexport default IntegerColumnFormatter;\n"],"file":"IntegerColumnFormatter.js"}