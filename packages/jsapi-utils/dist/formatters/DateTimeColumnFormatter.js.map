{"version":3,"sources":["../../src/formatters/DateTimeColumnFormatter.ts"],"names":["dh","Log","TableColumnFormatter","log","module","DateTimeColumnFormatter","isValid","format","i18n","DateTimeFormat","formatString","Date","e","makeFormat","label","type","TYPE_CONTEXT_PRESET","isSameFormat","formatA","formatB","makeGlobalFormatStringMap","showTimeZone","showTSeparator","separator","tz","Map","getGlobalFormats","formatStringMap","keys","makeFormatStringMap","getFormats","constructor","timeZone","timeZoneParam","defaultDateTimeFormatString","DEFAULT_DATETIME_FORMAT_STRING","DEFAULT_TIME_ZONE_ID","dhTimeZone","TimeZone","getTimeZone","error","getEffectiveFormatString","baseFormatString","get","value"],"mappings":"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","sourcesContent":["/* eslint class-methods-use-this: \"off\" */\nimport dh, { DateWrapper, TimeZone } from '@deephaven/jsapi-shim';\nimport Log from '@deephaven/log';\nimport TableColumnFormatter, {\n  TableColumnFormat,\n} from './TableColumnFormatter';\n\nconst log = Log.module('DateTimeColumnFormatter');\n\nexport type DateTimeColumnFormatterOptions = {\n  // Time zone\n  timeZone?: string;\n\n  // Show time zone in DateTime values\n  showTimeZone?: boolean;\n\n  // Show 'T' separator in DateTime values\n  showTSeparator?: boolean;\n\n  // DateTime format to use if columnFormats for DateTime isn't set\n  defaultDateTimeFormatString?: string;\n};\n\nexport class DateTimeColumnFormatter extends TableColumnFormatter<\n  Date | DateWrapper | number\n> {\n  /**\n   * Validates format object\n   * @param format Format object\n   * @returns true for valid object\n   */\n  static isValid(format: TableColumnFormat): boolean {\n    try {\n      dh.i18n.DateTimeFormat.format(format.formatString, new Date());\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static makeFormat(\n    label: string,\n    formatString: string,\n    type = TableColumnFormatter.TYPE_CONTEXT_PRESET\n  ): TableColumnFormat {\n    return {\n      label,\n      formatString,\n      type,\n    };\n  }\n\n  /**\n   * Check if the given formats match\n   * @param formatA format object to check\n   * @param formatB format object to check\n   * @returns True if the formats match\n   */\n  static isSameFormat(\n    formatA?: TableColumnFormat,\n    formatB?: TableColumnFormat\n  ): boolean {\n    return (\n      formatA === formatB ||\n      (formatA != null &&\n        formatB != null &&\n        formatA.type === formatB.type &&\n        formatA.formatString === formatB.formatString)\n    );\n  }\n\n  static DEFAULT_DATETIME_FORMAT_STRING = 'yyyy-MM-dd HH:mm:ss.SSS';\n\n  static DEFAULT_TIME_ZONE_ID = 'America/New_York';\n\n  static makeGlobalFormatStringMap(\n    showTimeZone: boolean,\n    showTSeparator: boolean\n  ): Map<string, string> {\n    const separator = showTSeparator ? `'T'` : ' ';\n    const tz = showTimeZone ? ' z' : '';\n    return new Map([\n      ['yyyy-MM-dd HH:mm:ss', `yyyy-MM-dd${separator}HH:mm:ss${tz}`],\n      ['yyyy-MM-dd HH:mm:ss.SSS', `yyyy-MM-dd${separator}HH:mm:ss.SSS${tz}`],\n      [\n        'yyyy-MM-dd HH:mm:ss.SSSSSSSSS',\n        `yyyy-MM-dd${separator}HH:mm:ss.SSSSSSSSS${tz}`,\n      ],\n    ]);\n  }\n\n  static getGlobalFormats(\n    showTimeZone: boolean,\n    showTSeparator: boolean\n  ): string[] {\n    const formatStringMap = DateTimeColumnFormatter.makeGlobalFormatStringMap(\n      showTimeZone,\n      showTSeparator\n    );\n    return [...formatStringMap.keys()];\n  }\n\n  static makeFormatStringMap(\n    showTimeZone?: boolean,\n    showTSeparator?: boolean\n  ): Map<string, string> {\n    const separator = showTSeparator ? `'T'` : ' ';\n    const tz = showTimeZone ? ' z' : '';\n    return new Map([\n      ['yyyy-MM-dd', `yyyy-MM-dd${tz}`],\n      ['MM-dd-yyyy', `MM-dd-yyyy${tz}`],\n      ['HH:mm:ss', `HH:mm:ss${tz}`],\n      ['HH:mm:ss.SSS', `HH:mm:ss.SSS${tz}`],\n      ['HH:mm:ss.SSSSSSSSS', `HH:mm:ss.SSSSSSSSS${tz}`],\n      ['yyyy-MM-dd HH:mm:ss', `yyyy-MM-dd${separator}HH:mm:ss${tz}`],\n      ['yyyy-MM-dd HH:mm:ss.SSS', `yyyy-MM-dd${separator}HH:mm:ss.SSS${tz}`],\n      [\n        'yyyy-MM-dd HH:mm:ss.SSSSSSSSS',\n        `yyyy-MM-dd${separator}HH:mm:ss.SSSSSSSSS${tz}`,\n      ],\n    ]);\n  }\n\n  static getFormats(\n    showTimeZone?: boolean,\n    showTSeparator?: boolean\n  ): string[] {\n    const formatStringMap = DateTimeColumnFormatter.makeFormatStringMap(\n      showTimeZone,\n      showTSeparator\n    );\n    return [...formatStringMap.keys()];\n  }\n\n  dhTimeZone: TimeZone;\n\n  defaultDateTimeFormatString: string;\n\n  showTimeZone: boolean;\n\n  showTSeparator: boolean;\n\n  formatStringMap: Map<string, string>;\n\n  constructor({\n    timeZone: timeZoneParam = '',\n    showTimeZone = true,\n    showTSeparator = false,\n    defaultDateTimeFormatString = DateTimeColumnFormatter.DEFAULT_DATETIME_FORMAT_STRING,\n  }: DateTimeColumnFormatterOptions = {}) {\n    super();\n\n    const timeZone =\n      timeZoneParam || DateTimeColumnFormatter.DEFAULT_TIME_ZONE_ID;\n\n    try {\n      this.dhTimeZone = dh.i18n.TimeZone.getTimeZone(timeZone);\n    } catch (e) {\n      log.error('Unsupported time zone id', timeZone);\n      this.dhTimeZone = dh.i18n.TimeZone.getTimeZone(\n        DateTimeColumnFormatter.DEFAULT_TIME_ZONE_ID\n      );\n    }\n\n    this.defaultDateTimeFormatString = defaultDateTimeFormatString;\n    this.showTimeZone = showTimeZone;\n    this.showTSeparator = showTSeparator;\n    this.formatStringMap = DateTimeColumnFormatter.makeFormatStringMap(\n      showTimeZone,\n      showTSeparator\n    );\n  }\n\n  getEffectiveFormatString(baseFormatString: string): string {\n    return this.formatStringMap.get(baseFormatString) || baseFormatString;\n  }\n\n  format(\n    value: Date | DateWrapper | number,\n    format?: TableColumnFormat\n  ): string {\n    const baseFormatString =\n      (format && format.formatString) || this.defaultDateTimeFormatString;\n    const formatString = this.getEffectiveFormatString(baseFormatString);\n    try {\n      return dh.i18n.DateTimeFormat.format(\n        formatString,\n        value,\n        this.dhTimeZone\n      );\n    } catch (e) {\n      log.error('Invalid format arguments');\n    }\n    return '';\n  }\n}\n\nexport default DateTimeColumnFormatter;\n"],"file":"DateTimeColumnFormatter.js"}