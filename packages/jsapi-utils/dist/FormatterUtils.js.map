{"version":3,"sources":["../src/FormatterUtils.ts"],"names":["TableColumnFormatter","FormatterUtils","getColumnFormats","settings","formatter","getDateTimeFormatterOptions","timeZone","defaultDateTimeFormat","showTimeZone","showTSeparator","defaultDateTimeFormatString","isCustomColumnFormatDefined","columnName","columnType","columnFormat","getColumnFormat","type","TYPE_CONTEXT_PRESET","TYPE_CONTEXT_CUSTOM"],"mappings":"SAEkCA,oB;AAElC,OAAO,MAAMC,cAAN,CAAqB;AACH,SAAhBC,gBAAgB,CAACC,QAAD,EAEF;AACnB,QAAM;AAAEC,MAAAA;AAAF,QAAgBD,QAAtB;AACA,WAAOC,SAAP;AACD;;AAEiC,SAA3BC,2BAA2B,CAACF,QAAD,EAKqC;AACrE,QAAM;AACJG,MAAAA,QADI;AAEJC,MAAAA,qBAFI;AAGJC,MAAAA,YAHI;AAIJC,MAAAA;AAJI,QAKFN,QALJ;AAMA,WAAO;AACLG,MAAAA,QADK;AAELI,MAAAA,2BAA2B,EAAEH,qBAFxB;AAGLC,MAAAA,YAHK;AAILC,MAAAA;AAJK,KAAP;AAMD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACoC,SAA3BE,2BAA2B,CAChCP,SADgC,EAEhCQ,UAFgC,EAGhCC,UAHgC,EAIvB;AACT,QAAMC,YAAY,GAAGV,SAAS,CAACW,eAAV,CAA0BF,UAA1B,EAAsCD,UAAtC,CAArB;AACA,WACEE,YAAY,IAAI,IAAhB,KACCA,YAAY,CAACE,IAAb,KAAsBhB,oBAAoB,CAACiB,mBAA3C,IACCH,YAAY,CAACE,IAAb,KAAsBhB,oBAAoB,CAACkB,mBAF7C,CADF;AAKD;;AA9CyB;AAiD5B,eAAejB,cAAf","sourcesContent":["import type { FormattingRule } from './Formatter';\nimport Formatter from './Formatter';\nimport { DateTimeColumnFormatter, TableColumnFormatter } from './formatters';\n\nexport class FormatterUtils {\n  static getColumnFormats(settings: {\n    formatter: FormattingRule[];\n  }): FormattingRule[] {\n    const { formatter } = settings;\n    return formatter;\n  }\n\n  static getDateTimeFormatterOptions(settings: {\n    timeZone: string;\n    defaultDateTimeFormat: string;\n    showTimeZone: boolean;\n    showTSeparator: boolean;\n  }): Required<ConstructorParameters<typeof DateTimeColumnFormatter>[0]> {\n    const {\n      timeZone,\n      defaultDateTimeFormat,\n      showTimeZone,\n      showTSeparator,\n    } = settings;\n    return {\n      timeZone,\n      defaultDateTimeFormatString: defaultDateTimeFormat,\n      showTimeZone,\n      showTSeparator,\n    };\n  }\n\n  /**\n   * Check if the formatter has a custom format defined for the column name and type\n   * @param formatter Formatter to check\n   * @param columnName Column name\n   * @param columnType Column type\n   * @returns True, if a custom format is defined\n   */\n  static isCustomColumnFormatDefined(\n    formatter: Formatter,\n    columnName: string,\n    columnType: string\n  ): boolean {\n    const columnFormat = formatter.getColumnFormat(columnType, columnName);\n    return (\n      columnFormat != null &&\n      (columnFormat.type === TableColumnFormatter.TYPE_CONTEXT_PRESET ||\n        columnFormat.type === TableColumnFormatter.TYPE_CONTEXT_CUSTOM)\n    );\n  }\n}\n\nexport default FormatterUtils;\n"],"file":"FormatterUtils.js"}