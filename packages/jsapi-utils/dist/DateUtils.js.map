{"version":3,"sources":["../src/DateUtils.ts"],"names":["dh","DateUtils","makeDateWrapper","timeZone","year","month","day","hour","minute","second","ns","yearString","padStart","monthString","dayString","hourString","minuteString","secondString","nanoString","dateString","i18n","DateTimeFormat","parse","FULL_DATE_FORMAT","TimeZone","getTimeZone","getNextNanos","sigNanos","parseInt","zeros","repeat","length","nextNanoString","getNextDate","components","values","date","hours","minutes","seconds","nanos","jsDate","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","parseMonth","Number","isNaN","NaN","cleanMonthString","trim","toLowerCase","i","months","startsWith","parseDateValues","padEnd","parseDateTimeString","dateTimeString","regex","result","exec","Error","overflow","parseDateRange","text","cleanText","now","startDate","endDate","DateWrapper","ofJsDate","getJsDate","dateWrapper","asDate"],"mappings":"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","sourcesContent":["import dh from '@deephaven/jsapi-shim';\nimport type { DateWrapper } from '@deephaven/jsapi-shim';\n\ninterface DateParts<T> {\n  year: T;\n  month: T;\n  date: T;\n  hours: T;\n  minutes: T;\n  seconds: T;\n  nanos: T;\n}\n\nexport class DateUtils {\n  static FULL_DATE_FORMAT = 'yyyy-MM-dd HH:mm:ss.SSSSSSSSS';\n\n  static months = [\n    'january',\n    'february',\n    'march',\n    'april',\n    'may',\n    'june',\n    'july',\n    'august',\n    'september',\n    'october',\n    'november',\n    'december',\n  ];\n\n  /**\n   *\n   * @param timeZone The time zone to parse this time in. E.g. America/New_York\n   * @param year The year for the date\n   * @param month The month, starting at 0\n   * @param day The day, starting at 1\n   * @param hour The hours\n   * @param minute The minutes\n   * @param second The seconds\n   * @param ns The nanoseconds\n   */\n  static makeDateWrapper(\n    timeZone: string,\n    year: number,\n    month = 0,\n    day = 1,\n    hour = 0,\n    minute = 0,\n    second = 0,\n    ns = 0\n  ): DateWrapper {\n    const yearString = `${year}`.padStart(4, '0');\n    const monthString = `${month + 1}`.padStart(2, '0');\n    const dayString = `${day}`.padStart(2, '0');\n    const hourString = `${hour}`.padStart(2, '0');\n    const minuteString = `${minute}`.padStart(2, '0');\n    const secondString = `${second}`.padStart(2, '0');\n    const nanoString = `${ns}`.padStart(9, '0');\n\n    const dateString = `${yearString}-${monthString}-${dayString} ${hourString}:${minuteString}:${secondString}.${nanoString}`;\n    return dh.i18n.DateTimeFormat.parse(\n      DateUtils.FULL_DATE_FORMAT,\n      dateString,\n      dh.i18n.TimeZone.getTimeZone(timeZone)\n    );\n  }\n\n  /**\n   * Takes the string the user entered and returns the next nanos value\n   * @param nanoString The nano string to get the next one of\n   * @returns The value of the next nanos\n   */\n  static getNextNanos(nanoString: string): number {\n    const sigNanos = parseInt(nanoString, 10);\n    // Get the zeroes needed for padding before adding one so we handle overflow properly.\n    const zeros = '0'.repeat(9 - nanoString.length);\n    const nextNanoString = `${sigNanos + 1}${zeros}`;\n    return parseInt(nextNanoString, 10);\n  }\n\n  /**\n   * @param components The string components that were parsed from the original string\n   * @param values The values that were parsed from the components\n   * @param timeZone The time zone to parse the date in. E.g. America/New_York\n   * @returns Returns the DateWrapper for the next date, or null if a full date was passed in\n   */\n  static getNextDate(\n    components: DateParts<string>,\n    values: DateParts<number>,\n    timeZone: string\n  ): DateWrapper | null {\n    let { year, month, date, hours, minutes, seconds, nanos } = values;\n\n    if (components.nanos != null) {\n      if (components.nanos.length === 9) {\n        // They want an exact match\n        return null;\n      }\n      nanos = DateUtils.getNextNanos(components.nanos);\n      if (nanos > 999999999) {\n        // There's an overflow, add it to the seconds manually\n        seconds += 1;\n        nanos = 0;\n      }\n    } else if (components.seconds != null) {\n      seconds += 1;\n    } else if (components.minutes != null) {\n      minutes += 1;\n    } else if (components.hours != null) {\n      hours += 1;\n    } else if (components.date != null) {\n      date += 1;\n    } else if (components.month != null) {\n      month += 1;\n    } else {\n      year += 1;\n    }\n\n    // Use the JS date to handle overflow rather than doing our own logic\n    // Because handling leap years and stuff is a pain\n    // Still need to add nanos after, and the overflow from that is already added to seconds above\n    const jsDate = new Date(year, month, date, hours, minutes, seconds);\n    return DateUtils.makeDateWrapper(\n      timeZone,\n      jsDate.getFullYear(),\n      jsDate.getMonth(),\n      jsDate.getDate(),\n      jsDate.getHours(),\n      jsDate.getMinutes(),\n      jsDate.getSeconds(),\n      nanos\n    );\n  }\n\n  /**\n   * Get the JS month value for the provided string.\n   * Matches digits or a month name (eg. '1', '01', 'jan', 'january' should all work)\n   * @param monthString The string to parse to a JS month value\n   * @returns number The JS month value, which starts at 0 for january, or NaN if nothing could be parsed\n   */\n  static parseMonth(monthString: string): number {\n    const month = parseInt(monthString, 10);\n    if (!Number.isNaN(month)) {\n      if (month >= 1 && month <= 12) {\n        return month - 1;\n      }\n      return NaN;\n    }\n\n    const cleanMonthString = monthString.trim().toLowerCase();\n    if (cleanMonthString.length >= 3) {\n      for (let i = 0; i < DateUtils.months.length; i += 1) {\n        if (DateUtils.months[i].startsWith(cleanMonthString)) {\n          return i;\n        }\n      }\n    }\n\n    return NaN;\n  }\n\n  /**\n   * Parse a date object out of the provided string segments.\n   * Also using `parseMonth` to get month names like Aug/August rather than\n   * simply doing `parseInt`.\n   * @param yearString The year part of the string\n   * @param monthString The month part of the string\n   * @param dayString The day part of the string\n   * @param hourString The hour part of the string\n   * @param minuteString The minute part of the string\n   * @param secondString The second part of the string\n   * @param nanoString The milli part of the string\n   */\n  static parseDateValues(\n    yearString: string,\n    monthString: string,\n    dayString: string,\n    hourString: string,\n    minuteString: string,\n    secondString: string,\n    nanoString: string\n  ): DateParts<number> | null {\n    const year = parseInt(yearString, 10);\n    const month = monthString != null ? this.parseMonth(monthString) : 0;\n    const date = dayString != null ? parseInt(dayString, 10) : 1;\n    const hours = hourString != null ? parseInt(hourString, 10) : 0;\n    const minutes = minuteString != null ? parseInt(minuteString, 10) : 0;\n    const seconds = secondString != null ? parseInt(secondString, 10) : 0;\n    const nanos =\n      nanoString != null ? parseInt(nanoString.padEnd(9, '0'), 10) : 0;\n    if (\n      Number.isNaN(year) ||\n      Number.isNaN(month) ||\n      Number.isNaN(date) ||\n      Number.isNaN(hours) ||\n      Number.isNaN(minutes) ||\n      Number.isNaN(seconds) ||\n      Number.isNaN(nanos)\n    ) {\n      return null;\n    }\n\n    return { year, month, date, hours, minutes, seconds, nanos };\n  }\n\n  /**\n   * Parse out a date time string into it's string components.\n   * Anything that is not captured in the string will be undefined.\n   *\n   * @param dateTimeString The date time string to parse\n   * @returns Containing the date time components\n   */\n  static parseDateTimeString(dateTimeString: string): DateParts<string> {\n    const regex = /\\s*(\\d{4})([-./]([\\da-z]+))?([-./](\\d{1,2}))?([tT\\s](\\d{2})([:](\\d{2}))?([:](\\d{2}))?([.](\\d{1,9}))?)?(.*)/;\n    const result = regex.exec(dateTimeString);\n    if (result == null) {\n      throw new Error(`Unexpected date string: ${dateTimeString}`);\n    }\n\n    const [\n      ,\n      year,\n      ,\n      month,\n      ,\n      date,\n      ,\n      hours,\n      ,\n      minutes,\n      ,\n      seconds,\n      ,\n      nanos,\n      overflow,\n    ] = result;\n    if (overflow != null && overflow.length > 0) {\n      throw new Error(\n        `Unexpected characters after date string '${dateTimeString}': ${overflow}`\n      );\n    }\n\n    return { year, month, date, hours, minutes, seconds, nanos };\n  }\n\n  /**\n   * Parses the date range provided from a string of text.\n   * @param text The string to parse the date from. Can be a keyword like \"today\", or in the format \"2018-08-04\"\n   * @param timeZone The time zone to parse this range in. E.g. America/New_York\n   * @returns A tuple with the start and end value/null for that date range, or both null\n   */\n  static parseDateRange(\n    text: string,\n    timeZone: string\n  ): [DateWrapper, DateWrapper | null] | [null, null] {\n    const cleanText = text.trim().toLowerCase();\n    if (cleanText.length === 0) {\n      throw new Error('Cannot parse date range from empty string');\n    }\n\n    if (cleanText === 'null') {\n      return [null, null];\n    }\n\n    if (cleanText === 'today') {\n      const now = new Date(Date.now());\n      const startDate = DateUtils.makeDateWrapper(\n        timeZone,\n        now.getFullYear(),\n        now.getMonth(),\n        now.getDate()\n      );\n      const endDate = DateUtils.makeDateWrapper(\n        timeZone,\n        now.getFullYear(),\n        now.getMonth(),\n        now.getDate() + 1\n      );\n      return [startDate, endDate];\n    }\n\n    if (cleanText === 'yesterday') {\n      const now = new Date(Date.now());\n      const startDate = DateUtils.makeDateWrapper(\n        timeZone,\n        now.getFullYear(),\n        now.getMonth(),\n        now.getDate() - 1\n      );\n      const endDate = DateUtils.makeDateWrapper(\n        timeZone,\n        now.getFullYear(),\n        now.getMonth(),\n        now.getDate()\n      );\n      return [startDate, endDate];\n    }\n\n    if (cleanText === 'now') {\n      const now = new Date(Date.now());\n      const date = dh.DateWrapper.ofJsDate(now);\n      return [date, null];\n    }\n\n    const components = DateUtils.parseDateTimeString(cleanText);\n    if (\n      components.year == null &&\n      components.month == null &&\n      components.date == null\n    ) {\n      throw new Error(`Unable to extract year, month, or day ${cleanText}`);\n    }\n\n    const values = DateUtils.parseDateValues(\n      components.year,\n      components.month,\n      components.date,\n      components.hours,\n      components.minutes,\n      components.seconds,\n      components.nanos\n    );\n\n    if (values == null) {\n      throw new Error(`Unable to extract date values from ${components}`);\n    }\n\n    const startDate = DateUtils.makeDateWrapper(\n      timeZone,\n      values.year,\n      values.month,\n      values.date,\n      values.hours,\n      values.minutes,\n      values.seconds,\n      values.nanos\n    );\n\n    const endDate = DateUtils.getNextDate(components, values, timeZone);\n    return [startDate, endDate];\n  }\n\n  /**\n   * Gets the Js Date object from the provided DateWrapper.\n   * In unit test, DateWrapper is just a number provided in millis, so handles that case.\n   * @param dateWrapper The DateWrapper object, or time in millis\n   */\n  static getJsDate(dateWrapper: DateWrapper | number): Date {\n    if (typeof dateWrapper === 'number') {\n      return new Date(dateWrapper);\n    }\n    return dateWrapper.asDate();\n  }\n}\n\nexport default DateUtils;\n"],"file":"DateUtils.js"}