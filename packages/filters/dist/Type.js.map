{"version":3,"sources":["../src/Type.ts"],"names":["Type"],"mappings":";;AAAA;AACA,OAAO,MAAMA,IAAN,CAAW;;gBAALA,I,QACU,I;;gBADVA,I,kBAGoB,c;;gBAHpBA,I,WAKa,O;;gBALbA,I,qBAOuB,iB;;gBAPvBA,I,iBASmB,a;;gBATnBA,I,0BAW4B,sB;;gBAX5BA,I,cAagB,U;;gBAbhBA,I,uBAeyB,mB;;gBAfzBA,I,QAiBU,I;;gBAjBVA,I,kBAmBoB,c;;gBAnBpBA,I,WAqBa,O;;gBArBbA,I,qBAuBuB,iB;;gBAvBvBA,I,YAyBc,Q;;gBAzBdA,I,aA2Be,S;;gBA3BfA,I,YA6Bc,Q;;gBA7BdA,I,YA+Bc,Q;;gBA/BdA,I,cAiCgB,U;;gBAjChBA,I,iBAmCmB,a;;gBAnCnBA,I,gBAqCkB,Y;;gBArClBA,I,cAuCgB,U;;gBAvChBA,I,iBAyCmB,a","sourcesContent":["/** Different filter conditions user can select */\nexport class Type {\n  static readonly eq = 'eq';\n\n  static readonly eqIgnoreCase = 'eqIgnoreCase';\n\n  static readonly notEq = 'notEq';\n\n  static readonly notEqIgnoreCase = 'notEqIgnoreCase';\n\n  static readonly greaterThan = 'greaterThan';\n\n  static readonly greaterThanOrEqualTo = 'greaterThanOrEqualTo';\n\n  static readonly lessThan = 'lessThan';\n\n  static readonly lessThanOrEqualTo = 'lessThanOrEqualTo';\n\n  static readonly in = 'in';\n\n  static readonly inIgnoreCase = 'inIgnoreCase';\n\n  static readonly notIn = 'notIn';\n\n  static readonly notInIgnoreCase = 'notInIgnoreCase';\n\n  static readonly isTrue = 'isTrue';\n\n  static readonly isFalse = 'isFalse';\n\n  static readonly isNull = 'isNull';\n\n  static readonly invoke = 'invoke';\n\n  static readonly contains = 'contains';\n\n  static readonly notContains = 'notContains';\n\n  static readonly startsWith = 'startsWith';\n\n  static readonly endsWith = 'endsWith';\n\n  static readonly containsAny = 'containsAny';\n}\n\nexport type TypeValue = typeof Type[Exclude<keyof typeof Type, 'prototype'>];\n"],"file":"Type.js"}