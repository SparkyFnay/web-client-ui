{"version":3,"sources":["../../src/formatters/TableColumnFormatter.ts"],"names":["TableColumnFormatter","isValid","format","isSameFormat","formatA","formatB","Error","makeFormat","label","formatString","type","value"],"mappings":";;AAAA;;AACA;AACA;AACA;AACA;AAaA,OAAO,MAAMA,oBAAN,CAAwC;AAO7C;AACF;AACA;AACA;AACA;AACgB,SAAPC,OAAO,CAACC,MAAD,EAAqC;AACjD,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACqB,SAAZC,YAAY,CACjBC,OADiB,EAEjBC,OAFiB,EAGR;AACT,UAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACmB,SAAVC,UAAU,CACfC,KADe,EAEfC,YAFe,EAGfC,IAHe,EAII;AACnB,WAAO;AAAEF,MAAAA,KAAF;AAASC,MAAAA,YAAT;AAAuBC,MAAAA;AAAvB,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACER,EAAAA,MAAM,CAACS,KAAD,EAAWT,MAAX,EAA+C;AACnD,WAAO,EAAP;AACD;;AAnD4C;;gBAAlCF,oB,iBACiC,a;;gBADjCA,oB,yBAGyC,qB;;gBAHzCA,oB,yBAKyC,qB;;AAiDtD,eAAeA,oBAAf","sourcesContent":["/* eslint class-methods-use-this: \"off\" */\n/**\n * Default column data formatter. Just interpolates the value as a string and returns.\n * Extend this class and register with TableUtils to make use of it.\n */\n\nexport type TableColumnFormatType =\n  | 'type-global'\n  | 'type-context-preset'\n  | 'type-context-custom';\n\nexport type TableColumnFormat = {\n  label: string;\n  formatString: string;\n  type: TableColumnFormatType;\n};\n\nexport class TableColumnFormatter<T = unknown> {\n  static TYPE_GLOBAL: TableColumnFormatType = 'type-global';\n\n  static TYPE_CONTEXT_PRESET: TableColumnFormatType = 'type-context-preset';\n\n  static TYPE_CONTEXT_CUSTOM: TableColumnFormatType = 'type-context-custom';\n\n  /**\n   * Validates format object\n   * @param format Format object\n   * @returns true for valid object\n   */\n  static isValid(format: TableColumnFormat): boolean {\n    return true;\n  }\n\n  /**\n   * Check if the given formats match\n   * @param formatA format object to check\n   * @param formatB format object to check\n   * @returns True if the formats match\n   */\n  static isSameFormat(\n    formatA?: TableColumnFormat,\n    formatB?: TableColumnFormat\n  ): boolean {\n    throw new Error('isSameFormat not implemented');\n  }\n\n  /**\n   * Create and return a Format object\n   * @param label The label of the format object\n   * @param formatString Format string to use for the format\n   * @param type The type of column to use for this format\n   * @returns A format object\n   */\n  static makeFormat(\n    label: string,\n    formatString: string,\n    type: TableColumnFormatType\n  ): TableColumnFormat {\n    return { label, formatString, type };\n  }\n\n  /**\n   * @param value The value to format\n   * @param format Optional format object with value transformation options\n   * @returns String the formatted text string of the value passed in.\n   */\n  format(value: T, format?: TableColumnFormat): string {\n    return '';\n  }\n}\n\nexport default TableColumnFormatter;\n"],"file":"TableColumnFormatter.js"}