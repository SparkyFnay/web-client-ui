{"version":3,"sources":["../src/Formatter.ts"],"names":["TableUtils","BooleanColumnFormatter","CharColumnFormatter","DateTimeColumnFormatter","DecimalColumnFormatter","DefaultColumnFormatter","IntegerColumnFormatter","StringColumnFormatter","Formatter","makeColumnFormatMap","columnFormattingRules","Map","reduce","map","next","dataType","getNormalizedType","columnType","has","set","formatMap","get","columnName","format","makeColumnFormattingRule","constructor","dateTimeOptions","decimalFormatOptions","integerFormatOptions","truncateNumbersWithPound","defaultColumnFormatter","typeFormatterMap","BOOLEAN","CHAR","DATETIME","DECIMAL","INT","STRING","columnFormatMap","getColumnFormatMapForType","createIfNecessary","undefined","getColumnFormat","getColumnTypeFormatter","columnTypeFormatter","getFormattedString","value","formatOverride","formatter","timeZone","dhTimeZone","id"],"mappings":"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","sourcesContent":["import TableUtils, { DataType } from './TableUtils';\nimport {\n  BooleanColumnFormatter,\n  CharColumnFormatter,\n  DateTimeColumnFormatter,\n  DecimalColumnFormatter,\n  DefaultColumnFormatter,\n  IntegerColumnFormatter,\n  StringColumnFormatter,\n  TableColumnFormat,\n  TableColumnFormatter,\n} from './formatters';\n\ntype ColumnName = string;\n\nexport interface FormattingRule {\n  columnType: string;\n  columnName: string;\n  format: TableColumnFormat;\n}\n\nexport class Formatter {\n  /**\n   * Converts FormattingRule[] to Map\n   * @param columnFormattingRules Array or column formatting rules\n   * @returns Map of columnName-to-format Maps indexed by normalized dataType\n   */\n  static makeColumnFormatMap(\n    columnFormattingRules: FormattingRule[]\n  ): Map<DataType, Map<ColumnName, TableColumnFormat>> {\n    if (columnFormattingRules == null) {\n      return new Map();\n    }\n    return columnFormattingRules.reduce((map, next) => {\n      const dataType = TableUtils.getNormalizedType(next.columnType);\n      if (dataType === null) {\n        return map;\n      }\n\n      if (!map.has(dataType)) {\n        map.set(dataType, new Map());\n      }\n      const formatMap = map.get(dataType);\n      formatMap?.set(next.columnName, next.format);\n      return map;\n    }, new Map<DataType, Map<ColumnName, TableColumnFormat>>());\n  }\n\n  /**\n   * Creates a column formatting rule\n   * @param columnType Normalized data type\n   * @param columnName Column name\n   * @param format Format object\n   */\n  static makeColumnFormattingRule(\n    columnType: DataType,\n    columnName: string,\n    format: TableColumnFormat\n  ): FormattingRule {\n    return {\n      columnType,\n      columnName,\n      format,\n    };\n  }\n\n  /**\n   * @param columnFormattingRules Optional array of column formatting rules\n   * @param dateTimeOptions Optional object with DateTime configuration\n   * @param decimalFormatOptions Optional object with Decimal configuration\n   * @param integerFormatOptions Optional object with Integer configuration\n   * @param truncateNumbersWithPound Determine if numbers should be truncated w/ repeating # instead of ellipsis at the end\n   */\n  constructor(\n    columnFormattingRules: FormattingRule[] = [],\n    dateTimeOptions?: ConstructorParameters<typeof DateTimeColumnFormatter>[0],\n    decimalFormatOptions?: ConstructorParameters<\n      typeof DecimalColumnFormatter\n    >[0],\n    integerFormatOptions?: ConstructorParameters<\n      typeof IntegerColumnFormatter\n    >[0],\n    truncateNumbersWithPound = false\n  ) {\n    // Formatting order:\n    // - columnFormatMap[type][name]\n    // - typeFormatterMap[type]\n    // - defaultColumnFormatter\n\n    this.defaultColumnFormatter = new DefaultColumnFormatter();\n\n    // Default formatters by data type\n    this.typeFormatterMap = new Map<DataType, TableColumnFormatter>([\n      [TableUtils.dataType.BOOLEAN, new BooleanColumnFormatter()],\n      [TableUtils.dataType.CHAR, new CharColumnFormatter()],\n      [\n        TableUtils.dataType.DATETIME,\n        new DateTimeColumnFormatter(dateTimeOptions),\n      ],\n      [\n        TableUtils.dataType.DECIMAL,\n        new DecimalColumnFormatter(decimalFormatOptions),\n      ],\n      [\n        TableUtils.dataType.INT,\n        new IntegerColumnFormatter(integerFormatOptions),\n      ],\n      [TableUtils.dataType.STRING, new StringColumnFormatter()],\n    ]);\n\n    // Formats indexed by data type and column name\n    this.columnFormatMap = Formatter.makeColumnFormatMap(columnFormattingRules);\n    this.truncateNumbersWithPound = truncateNumbersWithPound;\n  }\n\n  defaultColumnFormatter: TableColumnFormatter;\n\n  typeFormatterMap: Map<DataType, TableColumnFormatter>;\n\n  columnFormatMap: Map<DataType, Map<string, TableColumnFormat>>;\n\n  truncateNumbersWithPound: boolean;\n\n  /**\n   * Gets columnFormatMap indexed by name for a given column type, creates new Map entry if necessary\n   * @param columnType column type\n   * @param createIfNecessary create new entry if true\n   * @returns Map of format strings indexed by column name or undefined if it doesn't exist\n   */\n  getColumnFormatMapForType(\n    columnType: string,\n    createIfNecessary = false\n  ): Map<string, TableColumnFormat> | undefined {\n    const dataType = TableUtils.getNormalizedType(columnType);\n    if (dataType === null) {\n      return undefined;\n    }\n\n    if (createIfNecessary && !this.columnFormatMap.has(dataType)) {\n      this.columnFormatMap.set(dataType, new Map());\n    }\n    return this.columnFormatMap.get(dataType);\n  }\n\n  /**\n   * Gets a column format object for a given column type and name\n   * @param columnType column type\n   * @param columnName column name\n   * @returns format object or null for Default\n   */\n  getColumnFormat(\n    columnType: string,\n    columnName: string\n  ): TableColumnFormat | null {\n    const columnFormatMap = this.getColumnFormatMapForType(columnType);\n    return columnFormatMap?.get(columnName) ?? null;\n  }\n\n  getColumnTypeFormatter(columnType: string): TableColumnFormatter {\n    const dataType = TableUtils.getNormalizedType(columnType);\n    let columnTypeFormatter = this.defaultColumnFormatter;\n    if (dataType) {\n      columnTypeFormatter =\n        this.typeFormatterMap.get(dataType) ?? columnTypeFormatter;\n    }\n    return columnTypeFormatter;\n  }\n\n  /**\n   * Gets formatted string for a given value, column type and name\n   * @param value Value to format\n   * @param columnType Column type used to determine the formatting settings\n   * @param columnName Column name used to determine the formatting settings\n   * @param formatOverride Format object passed to the formatter in place of the format defined in columnFormatMap\n   */\n  getFormattedString(\n    value: unknown,\n    columnType: string,\n    columnName = '',\n    formatOverride?: TableColumnFormat\n  ): string {\n    if (value == null) {\n      return '';\n    }\n\n    const formatter = this.getColumnTypeFormatter(columnType);\n    const format =\n      formatOverride || this.getColumnFormat(columnType, columnName);\n\n    return formatter.format(value, format ?? undefined);\n  }\n\n  /**\n   * Gets the timeZone name\n   * @returns The time zone name E.g. America/New_York\n   */\n  get timeZone(): string {\n    const formatter = this.typeFormatterMap.get(\n      TableUtils.dataType.DATETIME\n    ) as DateTimeColumnFormatter;\n    return formatter?.dhTimeZone?.id;\n  }\n}\n\nexport default Formatter;\n"],"file":"Formatter.js"}